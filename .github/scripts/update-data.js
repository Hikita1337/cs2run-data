// .github/scripts/update-data.js
// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å cs2run_history.json —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º (—Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É)
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –æ–±—Ä—ã–≤–æ–≤ –∏ –ø—É—Å—Ç—ã—Ö API-–æ—Ç–≤–µ—Ç–æ–≤
// ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å Node 18+ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch)

const fs = require("fs");
const path = require("path");

const HISTORY_FILE = path.join(process.cwd(), "cs2run_history.json");
const API_URL = "https://cs2run.app/crash/state";
const MAX_HISTORY = 2000;
const FETCH_TIMEOUT_MS = 10000; // 10 —Å–µ–∫—É–Ω–¥

// === –ë—ã—Å—Ç—Ä–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º ===
async function fetchWithTimeout(url, timeout = FETCH_TIMEOUT_MS) {
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);
  try {
    const res = await fetch(url, { signal: controller.signal });
    clearTimeout(id);
    return res;
  } catch (e) {
    clearTimeout(id);
    throw e;
  }
}

// === –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π JSON-–ø–∞—Ä—Å–µ—Ä ===
function safeParseJson(text) {
  try {
    return JSON.parse(text);
  } catch {
    return null;
  }
}

// === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö API ===
function normalizeRemoteHistory(raw) {
  if (!raw) return [];

  // –§–æ—Ä–º–∞—Ç { data: { history: [ {id, crash}, ... ] } }
  if (raw.data && Array.isArray(raw.data.history)) {
    return raw.data.history.map(h => ({
      id: h.id ?? null,
      crash: parseFloat((h.crash ?? "").toString().replace(/[^\d.]/g, "")) || null
    })).filter(x => x.id != null && Number.isFinite(x.crash));
  }

  // –§–æ—Ä–º–∞—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤
  if (Array.isArray(raw)) {
    return raw.map(h => ({
      id: h?.id ?? h?.gameId ?? h?.round ?? null,
      crash: parseFloat((h?.crash ?? h?.value ?? h?.multiplier ?? "").toString().replace(/[^\d.]/g, "")) || null
    })).filter(x => x.id != null && Number.isFinite(x.crash));
  }

  return [];
}

// === –ß—Ç–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ ===
function readLocalHistory() {
  if (!fs.existsSync(HISTORY_FILE)) return [];
  const txt = fs.readFileSync(HISTORY_FILE, "utf8").trim();
  if (!txt) return [];
  const parsed = safeParseJson(txt);
  if (!parsed) return [];

  const arr = Array.isArray(parsed)
    ? parsed
    : Array.isArray(parsed.data)
      ? parsed.data
      : Object.values(parsed).find(v => Array.isArray(v)) || [];

  return arr
    .map(it => ({
      id: it.id ?? null,
      crash: Number(it.crash ?? it.value ?? it.multiplier) || null,
      time: it.time ?? null
    }))
    .filter(x => x.id != null && Number.isFinite(x.crash));
}

// === –ó–∞–ø–∏—Å—å –ª–æ–∫–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ ===
function writeLocalHistory(arr) {
  fs.writeFileSync(HISTORY_FILE, JSON.stringify(arr, null, 2), "utf8");
}

// === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
(async () => {
  try {
    console.log("üîÅ update-data.js ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...");
    const res = await fetchWithTimeout(API_URL);

    if (!res.ok) throw new Error(`Remote API returned ${res.status} ${res.statusText}`);

    const json = await res.json();
    const remoteItems = normalizeRemoteHistory(json);
    console.log(`üåê –ü–æ–ª—É—á–µ–Ω–æ ${remoteItems.length} –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å API`);

    if (!remoteItems.length) {
      console.log("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API ‚Äî –æ—Ç–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
      process.exit(0);
    }

    const nowISO = new Date().toISOString();
    const remoteWithTime = remoteItems.map(it => ({
      id: it.id,
      crash: Number(it.crash),
      time: nowISO
    }));

    const local = readLocalHistory();
    console.log(`üìÅ –õ–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${local.length} –∑–∞–ø–∏—Å–µ–π`);

    // --- –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ id ---
    const existingIds = new Set(local.map(x => x.id));
    const newItems = remoteWithTime.filter(it => !existingIds.has(it.id));

    if (!newItems.length) {
      console.log("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π");
      process.exit(0);
    }

    console.log(`‚ûï –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${newItems.length}`);

    // --- –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (—Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ —Å–Ω–∏–∑—É) ---
    const merged = [...local, ...newItems]
      .filter(it => it.id != null && Number.isFinite(it.crash));

    // ‚úÖ –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (—Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ —Å–Ω–∏–∑—É)
    merged.sort((a, b) => (a.id || 0) - (b.id || 0));  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID (—Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ —Å–Ω–∏–∑—É)

    // --- —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã ---
    const seen = new Set();
    const unique = [];
    for (const it of merged) {
      if (!seen.has(it.id)) {
        unique.push(it);
        seen.add(it.id);
      }
    }

    // --- –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é ---
    const truncated = unique.slice(-MAX_HISTORY);

    // --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º ---
    writeLocalHistory(truncated);
    console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${truncated.length} –∑–∞–ø–∏—Å–µ–π, –ø–æ—Ä—è–¥–æ–∫ ‚Äî —Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ —Å–Ω–∏–∑—É`);

    process.exit(0);

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ update-data.js:", err.stack || err);
    process.exit(1);
  }
})();
